#!/bin/bash

# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2015 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

#  Script that prompts user for all user input needed for the
#  trafodion_config file


#==============================================
# Defaults
LOCAL_WORKDIR="$( cd "$( dirname "$0" )" && pwd )"
TRAF_WORKDIR="/usr/lib/trafodion"
TRAF_CONFIG="/etc/trafodion/trafodion_config"
TRAF_CONFIG_DIR=$(dirname $TRAF_CONFIG)
LOCAL_TRAF_CONFIG="$LOCAL_WORKDIR/trafodion_config"

TRAF_USER="trafodion"
TRAF_USER_PASSWORD="traf123"   # must be 6-8 chars
NODE_LIST=""
HOME_DIR="/home"

TRAF_PACKAGE=""
TRAF_BUILD=""
DCS_BUILD=""

HADOOP_TYPE=""
ADMIN="admin"
PASSWORD="admin"
URL=""
HDFS_USER="hdfs"
HBASE_USER="hbase"
HBASE_GROUP="hbase"

SQ_ROOT=""
INIT_TRAFODION="N"
START="N"
SQCONFIG=""
DCS_SERVERS_PARM="2"

#==============================================

function print_usage {
cat << EOF

This script takes in user input to add to the trafodion_config file or uses known 
defaults. Script will return an error if user enters bad inputs. Type response or 
select 'Enter' to select default. 

Inputs Requested:

*Trafodion Password (default is '$TRAF_USER_PASSWORD')
*List of Nodes
*Home directory (default is '$HOME_DIR')
*Is cluster on the cloud (default is No)
*Location of EPEL RPM (default is No)
*Full path to Trafodion Server tar file 
(default is $TRAF_BUILD)
*Hadoop distribution user name (default is $ADMIN)
*Hadoop distribution password (default is $PASSWORD)
*Hadoop distribution url (default is distribution dependent)
*HDFS username (default is $HDFS_USER)
*HBase username (default is $HBASE_USER)
*HBase group (default is $HBASE_GROUP)
*Full pathname to the install directory location (default $SQ_ROOT)
*Full pathname to the DNS build tar file (default $DCS_BUILD)
*Start Trafodion after install (default is No)
*Total number of DCS servers to start


Options: 
    --help             Print this message and exit. 

EOF
}

#==============================================
#Parse input parameters

while [[ $# -gt 0 ]]; do
    case "$1" in 
        --help)
            print_usage
            exit -1
            ;;
        *)
            echo "***ERROR: unknown parameter '$1'"
            print_usage
            exit -1
    esac
    shift
done

#==============================================

echo
echo "*******************************"
echo " Trafodion Configuration Setup"
echo "*******************************"
echo
echo "***INFO: Please press 'Enter' to select defaults."
echo

sudo mkdir -p $TRAF_WORKDIR
sudo chmod 777 $TRAF_WORKDIR

# if there was a partial config file then use it
# to fill in default values so user doesn't have to retype
# everything again.
if [ -f $LOCAL_TRAF_CONFIG ]; then
	source $LOCAL_TRAF_CONFIG
fi

echo "#!/bin/bash" > $LOCAL_TRAF_CONFIG
echo "export TRAF_USER=\"$TRAF_USER\"" >> $LOCAL_TRAF_CONFIG
echo "export TRAF_WORKDIR=\"$TRAF_WORKDIR\"" >> $LOCAL_TRAF_CONFIG
echo "export LOCAL_WORKDIR=\"$LOCAL_WORKDIR\"" >> $LOCAL_TRAF_CONFIG
echo "export SQCONFIG=\"$SQCONFIG\"" >> $LOCAL_TRAF_CONFIG

#==============================================
# Password

echo -n "Enter $TRAF_USER password, default is '$TRAF_USER_PASSWORD': "
read answer
if [ -z $answer ]; then
   echo "export TRAF_USER_PASSWORD=\"$TRAF_USER_PASSWORD\"" >> $LOCAL_TRAF_CONFIG
else
   length=${#answer}
   if [[ $length -lt "6" ]]; then
      echo "***ERROR: Linux requires password to be at least 6 characters"
      echo "***ERROR: Password length must be from 6-8 characters."
      exit -1
   fi
   if [[ $length -gt "8" ]]; then
      echo "***ERROR: VNC server requires passwords be 8 or less characters"
      echo "***ERROR: Password length must be from 6-8 characters."
      exit -1  
   fi
   echo "export TRAF_USER_PASSWORD=\"$answer\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
# List of Nodes

echo -n "Enter list of nodes (blank separated), default '$NODE_LIST': "
read answer
if [[ -z "$answer" ]]; then
   if [ -z "$NODE_LIST" ]; then
      echo "***ERROR: Must enter list of nodes."
      exit -1
   fi 
else
   NODES="$answer"

   #Check nodes for any error

   nodeName=$(echo $NODES | sed 's/[^a-zA-Z0-9\ \.\-]//g')

   if [[ "$nodeName" != "$NODES" ]]; then
      echo "***ERROR: Nodes are not named properly."
      echo "***ERROR: Nodes can have no special characters other than '-' and '.'"
      exit -1
   fi

   for node in $NODES
   do
      if [[ "$node" =~ ^([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})[.]([0-9]{1,3})$ ]]; then
         echo "***ERROR: Nodes are not named properly."
         echo "***ERROR: IP addresses are not supported. Please use node names."
         exit -1
      fi
   done
fi
#==============================================
#Check hostname config

#Check that hostname -f and hostname -s are not returning the same value.
#If they are then /etc/hosts may need the FQDNs added to it.
if [[ $(hostname -f) == $(hostname -s) ]]; then
   echo "***ERROR: Hostname configuration error."
   echo "***ERROR: 'hostname -f' and 'hostname -s' are returning the same result."
   echo "***ERROR: 'hostname -f' must return FQDN and 'hostname -s' must return short name."
   exit -1
fi

#Check to make sure hostname -f does return a FQDN. This check is probably
#not needed due to the check above but this prevents odd configurations.
fullName=$(echo $(hostname -f) | grep -r "\." | wc -l)

if [[ "$fullName" -ne "1" ]]; then
   echo "***ERROR: Hostname configuration error."
   echo "***ERROR: 'hostname -f' must return FQDN."
   exit -1
fi

if [[ ! -z $NODES ]]; then
   FQDN=$(echo $(hostname) | grep -r "\." | wc -l)
   nodeListFQDN=$(echo $NODES | grep -r "\." | wc -l)
   #hostname short and node names long
   if [[ "$FQDN" -eq "0" ]] && [[ "$nodeListFQDN" -ge "1" ]] ; then
      echo "***ERROR: Node names must be in the same format as 'hostname'"
      echo "***ERROR: Please rerun trafodion_installer and enter short names for nodes"
      echo "***ERROR: Example: "$(hostname)""
      exit -1
   fi
   #hostname long and node names short
   if [[ "$FQDN" -ge "1" ]] && [[ "$nodeListFQDN" -eq "0" ]]; then
      for node in $NODES
      do
          nodeAndDomain=$node.$(hostname -d)
          NODE_LIST="$nodeAndDomain $NODE_LIST"
      done
      echo "***INFO: Added domain to all nodes"
      echo "***INFO: $NODE_LIST"
      echo
   #hostname long and (some or all) node names long
   elif [[ "$FQDN" -ge "1" ]] && [[ "$nodeListFQDN" -gt "0" ]]; then
        for node in $NODES
        do
           dots=`echo $node | grep -o "\." | wc -l`
           if [[ $dots -gt "0" ]] && [[ $dots -lt "3" ]]; then
              echo "***ERROR: Node names are not named properly"
              echo "***ERROR: Node name can not include a '.' that is not the domain"
              exit -1
           elif [[ $dots -eq "0" ]]; then
              nodeAndDomain=$node.$(hostname -d)
              NODE_LIST="$nodeAndDomain $NODE_LIST"
              echo "***INFO: Added domain to $node"
              echo "***INFO: $nodeAndDomain"
           else
              NODE_LIST="$node $NODE_LIST"
           fi
        done
   #Hostname short nad nodes names short
   else
      NODE_LIST="$NODES"
   fi
fi

node_count=$(echo $NODE_LIST | wc -w)
echo "export NODE_LIST=\"$NODE_LIST\"" >> $LOCAL_TRAF_CONFIG
echo "export node_count=\"$node_count\"" >> $LOCAL_TRAF_CONFIG

MY_NODES=""
for node in $NODE_LIST
do 
   MY_NODES="$MY_NODES -w $node"
done 
echo "export MY_NODES=\"$MY_NODES\"" >> $LOCAL_TRAF_CONFIG

if [ $node_count -eq 1 ]; then
    TRAF_PDSH=""
else
    TRAF_PDSH="pdsh -S $MY_NODES"
fi

#==============================================
# Home directory

echo -n "Enter Trafodion userid's home directory prefix, default is '$HOME_DIR': "
read answer

if [ ! -z $answer ]; then
   # strip off TRAF_USER if user added it on end of directory
   HOME_DIR=$(echo "$answer" | sed -e "s@/$TRAF_USER\$@@")
fi

#Test if home directory is on a NFS disk
diskType="$( df -P -T $answer | tail -n +2 | awk '{print $2}')"
if [ "$diskType" == "nfs" ]; then
   echo "***ERROR: Trafodion userid's home directory ($HOME_DIR) cannot be on an NFS disk"
   echo "***ERROR: Please choose a different directory to install on."
   exit -1
fi

echo "export HOME_DIR=\"$HOME_DIR\"" >> $LOCAL_TRAF_CONFIG

#==============================================
#Check if on the Cloud

echo -n "Is system being installed on HP Cloud, default is No: "
read answer
if [ -z $answer ]; then
   echo "export OPENSTACK_VM=\"0\"" >> $LOCAL_TRAF_CONFIG
else
   echo "export OPENSTACK_VM=\"1\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
#Check location given for EPEL RPM

echo -n "Specify location of EPEL RPM (if any), default is None: "
read answer

if [ -z $answer ]; then
   echo "export EPEL_RPM=\"\"" >> $LOCAL_TRAF_CONFIG
else
   echo "export EPEL_RPM=\"$answer\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
#Check location given for Java 65 or greater

echo -n "Specify location of Java 1.7.0_65 or higher, default is $JAVA_HOME: "
read answer

if [ -z $answer ]; then
      if [ -z $JAVA_HOME ]; then
         echo "***ERROR: Must specify location of Java 1.7.0_65 or higher."
         exit -1
      fi
else
      JAVA_HOME=$answer
fi

REQ_VER="1.7.0_65"
JAVA7="7"
JAVA65="65"

for node in $NODE_LIST
do
   THIS_JVM_VER="$(ssh -n $node $JAVA_HOME/bin/java -version 2>&1 > /dev/null)"
   temp_JAVA=`echo "${THIS_JVM_VER:20:2}" | sed 's/.*\.//'`

   #Check if using something less than Java 7
   if [[ "$temp_JAVA" -lt "$JAVA7" ]]; then
      error="true"
   fi

   #Checking if using 1.7.0_n
   if [[ "${THIS_JVM_VER:10:1}" -eq "0" ]] && [[ "$temp_JAVA" -eq "$JAVA7" ]]; then
      if [[ "${THIS_JVM_VER:12:1}" -eq "0" ]] || [[ "${THIS_JVM_VER:12:3}" -lt $JAVA65 ]]; then      
         error="true"
      fi
   fi

   if [[ -n $error ]]; then
      echo "***ERROR: Your existing JAVA_HOME on $node is less than $REQ_VER"
      echo "***ERROR: Your Java Version on $node = $THIS_JVM_VER"
      echo "***ERROR: Required java version on $node should be greater than $REQ_VER"
      exit -1
   fi
done

echo "export JAVA_HOME=\"$JAVA_HOME\"" >> $LOCAL_TRAF_CONFIG

#==============================================
# Trafodion Build location
# set the following based on what the user provided as input
# TRAF_PACKAGE = the trafodion package tar file which contains trafodion core & dcs
# TRAF_BUILD = the trafodion core tar file extracted from the trafodion package
# DCS_BUILD = the dcs tar file extracted from the trafodion package

echo -n "Enter location of trafodion tar file ($TRAF_PACKAGE): "
read answer
if [ -z $answer ] && [ -z $TRAF_PACKAGE ]; then
   echo "***ERROR: Must specify Trafodion tar file location."
   exit -1
fi

if [ ! -z "$answer" ]; then
   TRAF_PACKAGE="$answer"
fi

# make sure file exists
if [ ! -f $TRAF_PACKAGE ]; then
   echo "***ERROR: $TRAF_PACKAGE does not exist"
   exit -1
fi

# Determine if we have a package or just the trafodion_server tar file
# Normally, the package file is what should be specified but because
# we used to not support the package file and required the trafodion core
# tar file previous users might still specify the trafodion core tar file instead
# Also, developers might only have trafodion core tar file and not a package
# tar file.
package=$(tar -tzf $TRAF_PACKAGE | grep build-version.txt | wc -l )
if [ $package -eq 0 ]; then
   
   # assume user specified a trafodion core tar file
   TRAF_BUILD=$TRAF_PACKAGE
   TRAF_PACKAGE=""
   
   #TODO: do a quick sanity check on the file to make sure its a traf build tar file

   echo "***INFO: tar file is not a package tar file which includes Trafodion & DCS"
   echo "***INFO: assuming its a Trafodion build only tar file"
   
   # since its not a package tar file, we'll need to prompt for the dcs build file
   echo -n "Enter location of DCS tar file ($DCS_BUILD): "
   read answer
   if [ -z $answer ] && [ -z $DCS_BUILD ]; then
      echo "***ERROR: Must specify DCS tar file location."
      exit -1
   fi

   DCS_BUILD=$answer
   
   # make sure file exists
   if [ ! -f $DCS_BUILD ]; then
      echo "***ERROR: $DCS_BUILD does not exist"
      exit -1
   fi

   #TODO: do a quick sanity check on the file to make sure its a dcs build tar file
   
else
   # user specifed a package file
   TRAF_BUILD=""
   DCS_BUILD=""
fi

echo "export TRAF_PACKAGE=\"$TRAF_PACKAGE\"" >> $LOCAL_TRAF_CONFIG
echo "export TRAF_BUILD=\"$TRAF_BUILD\"" >> $LOCAL_TRAF_CONFIG
echo "export DCS_BUILD=\"$DCS_BUILD\"" >> $LOCAL_TRAF_CONFIG

#>>> to allow failed installs to be rerun easily we need to do something
#>>> about defaulting the tar file once the user specified it but maybe
#>>> blank it out once the install completes successfully.

#==============================================
# Hadoop Distro

echo "***INFO: Detecting Hadoop distro"

ambari_installed=$(rpm -qa | grep ambari | wc -l )
cloudera_installed=$(rpm -qa | grep cloudera | wc -l )

if [[ "$ambari_installed" -eq "0" ]] && [[ "$cloudera_installed" -eq "0" ]]; then
   echo "***ERROR: Hadoop distribution could not be determined."
   echo "***ERROR: Only Hortonworks or Cloudera supported."
   exit -1
fi 

if [[ "$ambari_installed" -ge "1" ]] && [[ "$cloudera_installed" -ge "1" ]]; then
   echo "***ERROR: Hadoop distribution could not be determined."
   echo "***ERROR: Both Hortonworks and Cloudera detected, ambiguous."
   echo "***ERROR: Please do an uninstall of one of them."
   exit -1 
fi

echo "exit" | hbase shell &> hbaseVersion.txt

if [[ $ambari_installed -gt 0 ]]; then
   echo "***INFO: Hortonworks detected"
   #Check that not trying to install on Hortonworks Sandbox
   if [[ $(hostname -f) == "sandbox.hortonworks.com" ]]; then
      echo "***ERROR: Install on Hortonworks Sandbox not supported."
      exit -1
   fi
   #Check that Hortonworks 2.2 is not installed
   versionInstalled=`grep "Version" hbaseVersion.txt | sed 's/,.*//' | sed 's/-.*//' | grep 2.1.* | wc -l`
   if [[ $versionInstalled -eq "0" ]]; then
      echo "***ERROR: Only Hortonworks version 2.1.* is currently supported."
      echo "***ERROR: Detected Hortonworks version:"
      cat hbaseVersion.txt
      exit -1
   fi
   nameOfVersion=$(grep "Version" hbaseVersion.txt | sed 's/,.*//' | sed 's/-.*//' | grep 2.1.*)
   hadoop_type="hortonworks"
   echo "export HADOOP_TYPE=\"$hadoop_type\"" >> $LOCAL_TRAF_CONFIG
   if [ -z "$URL" ]; then
      URL=$(hostname --long):8080
   fi
fi

if [[ $cloudera_installed -gt 0 ]]; then
   echo "***INFO: Cloudera detected"

   #Check that Cloudera 5.2 or 5.3 are not installed.
   versionInstalled=`grep "Version" hbaseVersion.txt | sed 's/,.*//' | sed 's/.*\-//' | grep cdh5.0.* | wc -l`
   nameOfVersion=$(grep "Version" hbaseVersion.txt | sed 's/,.*//' | sed 's/.*\-//' | grep cdh5.0.*)
   if [[ $versionInstalled -eq "0" ]]; then
      versionInstalled=`grep "Version" hbaseVersion.txt | sed 's/,.*//' | sed 's/.*\-//' | grep cdh5.1.* | wc -l`
      if [[ $versionInstalled -eq "0" ]];then
         echo "***ERROR: Only Cloudera Versions 5.0.* or 5.1.* are currently supported."
         echo "***ERROR: Detected Cloudera version:"
         cat hbaseVersion.txt
         exit -1 
      fi
      nameOfVersion=$(grep "Version" hbaseVersion.txt | sed 's/,.*//' | sed 's/.*\-//' | grep cdh5.1.*)
   fi
   #Check for Cloudera parcels of packages.
   parcelsInstalled=`sudo ls /opt/cloudera/parcels/ | wc -l`
   if [[ $parcelsInstalled -gt "0" ]]; then
      echo "***ERROR: Cloudera parcels installed"
      echo "***ERROR: Trafodion only supports Cloudera packages at this time."
      exit -1
   fi   
   hadoop_type="cloudera"
   echo "export HADOOP_TYPE=\"$hadoop_type\"" >> $LOCAL_TRAF_CONFIG
   if [ -z "$URL" ]; then
      URL=$(hostname --long):7180
   fi  
fi
echo "***DEBUG: nameOfVersion=$nameOfVersion"
for node in $NODE_LIST;
do
   ssh $node -n 'echo "exit" | hbase shell &> hbaseVersion.txt'
   versionInstalled=$(ssh -n $node grep \"$nameOfVersion\" hbaseVersion.txt | wc -l)
   if [[ "$versionInstalled" -eq "0" ]]; then
      echo "***ERROR: $hadoop_type version on $node not same as all other nodes."
      echo "***ERROR: Please reinstall $hadoop_type with same version on all nodes."
      exit -1
   fi
done 

#==============================================
#Hadoop user name

echo -n "Enter $hadoop_type admin username, default is '$ADMIN': "
read answer

if [ -z $answer ]; then
   echo "export ADMIN=\"$ADMIN\"" >> $LOCAL_TRAF_CONFIG
   username=$ADMIN
else
   echo "export ADMIN=\"$answer\"" >> $LOCAL_TRAF_CONFIG
   username=$answer
fi
#==============================================
#Hadoop Password

echo -n "Enter $hadoop_type admin password, default is '$PASSWORD': "
read answer

if [ -z $answer ]; then
   echo "export PASSWORD=\"$PASSWORD\"" >> $LOCAL_TRAF_CONFIG
   password=$PASSWORD
else
   echo "export PASSWORD=\"$answer\"" >> $LOCAL_TRAF_CONFIG
   password=$answer
fi

#==============================================
#Hadoop URL

echo -n "Enter $hadoop_type external network URL (including port), default is '$URL': "
read answer

#TODO: check URL is valid

if [ ! -z  $answer ]; then
   URL=$answer
fi
echo "export URL=\"$URL\"" >> $LOCAL_TRAF_CONFIG

temp=$(curl -su $username:$password http://$URL/api/v1/clusters |grep name | sed -e 's@[,]@@'g | sed 's/^[^\:]* ://')
CLUSTER_NAME=$(echo $temp | sed -e 's/^"//' -e 's/"$//')
CLUSTER_NAME=${CLUSTER_NAME// /%20}

if [ -z $CLUSTER_NAME ]; then
   if [[ $hadoop_type == "cloudera" ]]; then
      echo "***INFO: Cloudera server might be down, attempting to restart"
      sudo /etc/init.d/cloudera-scm-server restart 2>&1 | tee -a $INSTALL_LOG
      temp=$(curl -su $username:$password http://$URL/api/v1/clusters |grep name | sed -e 's@[,]@@'g | sed 's/^[^\:]* ://')
      CLUSTER_NAME=$(echo $temp | sed -e 's/^"//' -e 's/"$//')
      CLUSTER_NAME=${CLUSTER_NAME// /%20}
      if [ -x $CLUSTER_NAME ]; then
         echo "***ERROR: Could not access http://$URL" 2>&1 | tee -a $INSTALL_LOG
         echo "***ERROR: Check URL and port are correct or if Cloudera manager is up" 2>&1 | tee -a $INSTALL_LOG
         exit -1
      fi
   else 
      echo "***ERROR: Could not access http://$URL" 2>&1 | tee -a $INSTALL_LOG
      echo "***ERROR: Check URL and port are correct or if $hadoop_type is up." 2>&1 | tee -a $INSTALL_LOG
      exit -1
   fi
fi

echo "export CLUSTER_NAME=\"$CLUSTER_NAME\"" >> $LOCAL_TRAF_CONFIG

#==============================================
#HDFS Username

echo -n "Enter HDFS username, default is '$HDFS_USER': "
read answer

if [ -z $answer ]; then
   echo "export HDFS_USER=\"$HDFS_USER\"" >> $LOCAL_TRAF_CONFIG
else
   echo "export HDFS_USER=\"$answer\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
#HBase user

echo -n "Enter HBase username, default is '$HBASE_USER': "
read answer

if [ -z $answer ]; then
   echo "export HBASE_USER=\"$HBASE_USER\"" >> $LOCAL_TRAF_CONFIG
else
   echo "export HBASE_USER=\"$answer\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
#HBase group

echo -n "Enter HBase group, default is '$HBASE_GROUP': "
read answer

if [ -z $answer ]; then
   echo "export HBASE_GROUP=\"$HBASE_GROUP\"" >> $LOCAL_TRAF_CONFIG
else
   echo "export HBASE_GROUP=\"$answer\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
#Install location

if [ -z $SQ_ROOT ]; then

	# if we have a package file then use its name for the default install dir
	if [ ! -z "$TRAF_PACKAGE" ]; then
	   traf_filename=$(basename "$TRAF_PACKAGE")
	   SQ_ROOT="$HOME_DIR/$TRAF_USER/${traf_filename%.tar.gz}"
	else
	   # otherwise, create a default install dir using a timestamp
	   SQ_ROOT="$HOME_DIR/$TRAF_USER/traf_$(date +%F_%H%M)"
	fi
fi

echo -n "Enter directory to install trafodion to, default is '$SQ_ROOT': "
read answer

if [ -z $answer ]; then
   echo "export SQ_ROOT=\"$SQ_ROOT\"" >> $LOCAL_TRAF_CONFIG
else
   echo "export SQ_ROOT=\"$answer\"" >> $LOCAL_TRAF_CONFIG
fi

#==============================================
#Run sqstart

echo -n "Start Trafodion after install (Y/N), default is N: "
read answer

if [ -z $answer ]; then
   echo "export START=\"N\"" >> $LOCAL_TRAF_CONFIG
   echo "export INIT_TRAFODION=\"N\"" >> $LOCAL_TRAF_CONFIG 
else
   echo "export START=\"${answer^}\"" >> $LOCAL_TRAF_CONFIG
   if [[ "${answer^}" == "Y" ]]; then 
      echo "export INIT_TRAFODION=\"Y\"" >> $LOCAL_TRAF_CONFIG 
   else
      echo "export INIT_TRAFODION=\"N\"" >> $LOCAL_TRAF_CONFIG
   fi
fi

userForTrafodion=`grep "$TRAF_USER:" /etc/passwd | wc -l`

if [[ "$userForTrafodion" != "0" ]]; then
   isTrafUp=$(sudo su trafodion --login --command "sqcheck")

   trafodionRunning=$(echo $isTrafUp | grep "The SQ environment is up" | wc -l)

   if [[ "$trafodionRunning" -eq "1" ]]; then
      echo "***ERROR: Trafodion is still running." 
      echo -n "Stop Trafodion (Y/N), default is N: "
      read answer
  
      if [ -z $answer ]; then 
         echo "***ERROR: Please stop Trafodion then rerun trafodion_install"
         echo "***ERROR: Change to trafodion userid then do a 'sqstop'"
         exit -1
      else
         if [[ ${answer^} == "Y" ]]; then
            echo "***INFO: Stopping Trafodion instance."
            sudo su $TRAF_USER --login --command "sqstop"
            sudo su $TRAF_USER --login --command "ckillall"
         else 
            echo "***ERROR: Please stop Trafodion then rerun trafodion_install"
            echo "***ERROR: Change to trafodion user id then do a 'sqstop'"
            exit -1
         fi 
      fi
   fi
fi

#==============================================
#DCS Servers

echo -n "Total number of DCS servers to start, default ($DCS_SERVERS_PARM): "
read answer

if [ ! -z $answer ]; then
   DCS_SERVERS_PARM="$answer"
fi

echo "export DCS_SERVERS_PARM=\"$DCS_SERVERS_PARM\"" >> $LOCAL_TRAF_CONFIG

#==============================================
#All items added to config file
#Will add setup complete flag

echo "export CONFIG_COMPLETE=\"true\"" >> $LOCAL_TRAF_CONFIG
#=============================================

$TRAF_PDSH sudo mkdir -p $TRAF_CONFIG_DIR
$TRAF_PDSH sudo chmod 777 $TRAF_CONFIG_DIR
sudo cp $LOCAL_TRAF_CONFIG $TRAF_CONFIG
echo "***INFO: Configuration file: $TRAF_CONFIG"

# copy trafodion config to all nodes
if [ $node_count -ne 1 ]; then
   $TRAF_PDSH sudo mkdir -p $(dirname $LOCAL_TRAF_CONFIG)
   $TRAF_PDSH sudo chmod 777 $(dirname $LOCAL_TRAF_CONFIG)
   pdcp $MY_NODES $LOCAL_TRAF_CONFIG $(dirname $LOCAL_TRAF_CONFIG)
   $TRAF_PDSH sudo cp -f $LOCAL_TRAF_CONFIG $TRAF_CONFIG_DIR
fi
$TRAF_PDSH sudo chmod 777 $TRAF_CONFIG

#sudo rm $LOCAL_TRAF_CONFIG

echo "***INFO: Trafodion configuation setup complete"

#!/bin/bash

# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2013-2014 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

#
# This script will configure HBase with HBase-trx 
# and co-processors needed for Trafodion.  It uses
# Cloudera Manager's REST api to do this.
#
# NOTE: Only for Cloudera installations

###Default Values###
typeset TRAF_WORKDIR="$( cd "$( dirname "$0" )" && pwd )/.."
NODE_LIST=$(cat $TRAF_WORKDIR/node_list)
MY_NODES=$(cat $TRAF_WORKDIR/my_nodes)
node_count=$(echo $NODE_LIST | wc -w)

TRAF_BUILD=$1
CLOUDERA_ADMIN=$2
CLOUDERA_PASSWORD=$3
CLOUDERA_MANAGER_URL=$4
TRAF_VERSION=$5
HDFS_USER=$6
HBASE_USER=$7
HBASE_GROUP=$8
TRAF_USER=$9

#=====================================
# copy Trafodion trx jar to Cloudera's plugins directory on all nodes

cd $TRAF_WORKDIR

# determine java version and choose corresponding jar files
java_version=$(ps -C java --noheader -o pid,user,cmd | grep --max-count=1 jdk | awk '{print $3}' | sed -e "s@^.*jdk\([0-9]*.[0-9]*\).*@\1@")
echo "***INFO: Detected JAVA version $java_version"
if [ "$java_version" == "1.6" ]; then
	hbase_trx_jar="hbase-trx-${TRAF_VERSION}-java6.jar"
	bulkload_jar="trafodion-hbase-extensions-${TRAF_VERSION}-java6.jar"
else
	hbase_trx_jar="hbase-trx-${TRAF_VERSION}.jar"
	bulkload_jar="trafodion-hbase-extensions-${TRAF_VERSION}.jar"
fi
tar -xzf $TRAF_BUILD export/lib/$hbase_trx_jar
if [ $? != 0 ]; then
    echo "***ERROR: unable to find export/lib/$hbase_trx_jar in $TRAF_BUILD"
    exit -1
fi
tar -xzf $TRAF_BUILD export/lib/$bulkload_jar
if [ $? != 0 ]; then
    echo "***ERROR: unable to find export/lib/$bulkload_jar in $TRAF_BUILD"
    exit -1
fi

# if more than one node then copy to all nodes
echo "***INFO: copying $hbase_trx_jar to all nodes"
if [ $node_count -ne 1 ]; then
    pdsh $MY_NODES mkdir -p $TRAF_WORKDIR 2>/dev/null
    pdcp $MY_NODES export/lib/$hbase_trx_jar $TRAF_WORKDIR
    pdsh $MY_NODES sudo cp $TRAF_WORKDIR/$hbase_trx_jar /usr/share/cmf/lib/plugins
    pdsh $MY_NODES sudo chmod 644 /usr/share/cmf/lib/plugins/$hbase_trx_jar
else
    cp export/lib/$hbase_trx_jar $TRAF_WORKDIR
    chmod 755 $TRAF_WORKDIR/$hbase_trx_jar
    sudo cp $TRAF_WORKDIR/$hbase_trx_jar /usr/share/cmf/lib/plugins
fi

echo "***INFO: copying $bulkload_jar to all nodes"
if [ $node_count -ne 1 ]; then
    pdsh $MY_NODES mkdir -p $TRAF_WORKDIR 2>/dev/null
    pdcp $MY_NODES export/lib/$bulkload_jar $TRAF_WORKDIR
    pdsh $MY_NODES sudo cp $TRAF_WORKDIR/$bulkload_jar /usr/share/cmf/lib/plugins
    pdsh $MY_NODES sudo chmod 644 /usr/share/cmf/lib/plugins/$bulkload_jar
else
    cp export/lib/$bulkload_jar $TRAF_WORKDIR
    chmod 755 $TRAF_WORKDIR/$bulkload_jar
    sudo cp $TRAF_WORKDIR/$bulkload_jar /usr/share/cmf/lib/plugins
fi

# create new directories for bulkload if not already there
rm traf_temp_output 2>/dev/null
sudo su $HDFS_USER --command "hadoop fs -mkdir /hbase-staging" 2> traf_temp_output
if [ $? != 0 ]; then
   # ok if directory already exists
   dir_exists=$(grep "File exists" traf_temp_output | wc -l)
   if [ $dir_exists -eq 0 ]; then
      echo "***ERROR: 'hadoop fs -mkdir /hbase-staging' command failed"
      echo "***ERROR: $(cat traf_temp_output)"
      exit -1
   fi
fi
sudo su $HDFS_USER --command "hadoop fs -chown -R $HBASE_USER:$HBASE_GROUP /hbase-staging"
sudo su $HDFS_USER --command "hadoop fs -mkdir /bulkload" 2> traf_temp_output
if [ $? != 0 ]; then
   # ok if directory already exists
   dir_exists=$(grep "File exists" traf_temp_output | wc -l)
   if [ $dir_exists -eq 0 ]; then
      echo "***ERROR: 'hadoop fs -mkdir /bulkload' command failed"
      echo "***ERROR: $(cat traf_temp_output)"
      exit -1
   fi
fi
sudo su $HDFS_USER --command "hadoop fs -chown -R $TRAF_USER:trafodion /bulkload"

#=====================================
# Modify hadoop settings as needed by Trafodion

rm $TRAF_WORKDIR/traf_hdfs1_config_temp 2> /dev/null
rm $TRAF_WORKDIR/traf_hbase_config_temp 2> /dev/null

# change the hdfs configuration using Cloudera's REST API
curl -X PUT -H 'Content-Type:application/json' -u $CLOUDERA_ADMIN:$CLOUDERA_PASSWORD  --data \
'{ "roleTypeConfigs" :  [ {
        "roleType" : "NAMENODE",
        "items": [ {
                "name" : "namenode_java_heapsize",
        "value" : "1073741824"
                } ]
   }, {
        "roleType" : "SECONDARYNAMENODE",
        "items":[ {
                "name" : "secondary_namenode_java_heapsize",
        "value" : "1073741824"
                } ]
     } ]
}' \
http://$CLOUDERA_MANAGER_URL/api/v1/clusters/$CLUSTER_NAME/services/hdfs1/config > $TRAF_WORKDIR/traf_hdfs1_config_temp

if [ $? != 0 ]; then
    echo "***INFO: unable to modify hdfs configuration through Cloudera's REST API."
    exit -1
fi

# in most cases curl does not return an error
# so curl's actual output needs to be checked, too
curl_error=$(grep TITLE $TRAF_WORKDIR/traf_hdfs1_config_temp | grep Error | wc -l)
if [ $curl_error -ne 0 ]; then
    echo "***INFO: unable to modify hdfs configuration through Cloudera's REST API."
    exit -1
fi

rm $TRAF_WORKDIR/traf_hdfs1_config_temp 2> /dev/null

# change the hbase configuration using Cloudera Manager's REST api
curl -X PUT -H 'Content-Type:application/json' -u $CLOUDERA_ADMIN:$CLOUDERA_PASSWORD  --data \
'{ "roleTypeConfigs" :	[ {
	"roleType" : "MASTER",
	"items" : [ { 
		"name" : "hbase_master_config_safety_valve", 
        "value" : "<property>\r\n   <name>hbase.master.distributed.log.splitting</name>\r\n   <value>false</value>\r\n</property>\r\n"
		} ]
    }, {
	"roleType" : "REGIONSERVER", 
	"items" : [ { 
		"name" : "hbase_coprocessor_region_classes", 
                "value" : "org.apache.hadoop.hbase.regionserver.transactional.TransactionalAggregateImpl,org.trafodion.sql.extensions.TrafBulkLoadEndpoint"
		}, {
		"name" : "hbase_regionserver_class", 
                "value" : "org.apache.hadoop.hbase.ipc.TransactionalRegionInterface"
		}, {
		"name" : "hbase_regionserver_config_safety_valve", 
		"value" : "<property>\r\n   <name>hbase.regionserver.impl</name>\r\n   <value>org.apache.hadoop.hbase.regionserver.transactional.TransactionalRegionServer</value>\r\n</property>\r\n<property>\r\n  <name>hbase.hregion.impl</name>\r\n   <value>org.apache.hadoop.hbase.regionserver.transactional.TransactionalRegion</value>\r\n</property>\r\n<property>\r\n   <name>hbase.hlog.splitter.impl</name>\r\n   <value>org.apache.hadoop.hbase.regionserver.transactional.THLogSplitter</value>\r\n</property>\r\n<property>\r\n   <name>hbase.regionserver.region.split.policy</name>\r\n   <value>org.apache.hadoop.hbase.regionserver.ConstantSizeRegionSplitPolicy</value>\r\n</property>\r\n  <property>\r\n   <name>hbase.snapshot.enabled</name>\r\n   <value>true</value>\r\n</property>\r\n <property>\r\n   <name>hbase.bulkload.staging.dir</name>\r\n   <value>/hbase-staging</value>\r\n</property>\r\n <property>\r\n   <name>hbase.regionserver.region.transactional.hlog</name>\r\n   <value>false</value>\r\n</property>\r\n <property>\r\n   <name>hbase.regionserver.region.transactional.tlog</name>\r\n   <value>true</value>\r\n</property>\r\n"
		} ] 
	} ] 
}' \
http://$CLOUDERA_MANAGER_URL/api/v1/clusters/$CLUSTER_NAME/services/hbase1/config > $TRAF_WORKDIR/traf_hbase_config_temp

if [ $? != 0 ]; then
    echo "***INFO: unable to modify hbase configuration through Cloudera's REST API."
    exit -1
fi

# in most cases curl does not return an error
# so curl's actual output needs to be checked, too
curl_error=$(grep TITLE $TRAF_WORKDIR/traf_hbase_config_temp | grep Error | wc -l)
if [ $curl_error -ne 0 ]; then
    echo "***INFO: unable to modify hbase configuration through Cloudera's REST API."
    cat traf_hbase_config_temp
    exit -1
fi
curl_error=$(grep message $TRAF_WORKDIR/traf_hbase_config_temp | wc -l)
if [ $curl_error -ne 0 ]; then
    echo "***INFO: unable to modify hbase configuration through Cloudera's REST API."
    cat traf_hbase_config_temp
    exit -1
fi
rm $TRAF_WORKDIR/traf_hbase_config_temp 2> /dev/null

#=====================================
# restart Cloudera to pick up all the changes just made
poll_time=30
echo "***INFO: restarting hbase to pickup Trafodion transaction jar"
echo "***INFO: ...polling every $poll_time seconds until restart is completed."
restart_info=$(curl -X POST -u $CLOUDERA_ADMIN:$CLOUDERA_PASSWORD \
    http://$CLOUDERA_MANAGER_URL/api/v1/clusters/$CLUSTER_NAME/commands/restart)
echo $restart_info
command_id=$(echo $restart_info | grep id | awk '{print $4}' | sed -e 's@,@@' )
echo "***DEBUG: Cloudera command_id=$command_id"

# poll until restart is completed as a restart can take a while
active=1
while [ $active -ne 0 ]; do
    sleep $poll_time
    curl -u $CLOUDERA_ADMIN:$CLOUDERA_PASSWORD \
        http://$CLOUDERA_MANAGER_URL/api/v1/commands/$command_id \
        > $TRAF_WORKDIR/hbase_restart_status_temp
    cat $TRAF_WORKDIR/hbase_restart_status_temp
    echo "***INFO: ...polling every $poll_time seconds until restart is completed."
    # if restart command is still active, then active will not equal 0
    active=$(cat $TRAF_WORKDIR/hbase_restart_status_temp | grep '"active" : true' | wc -l)
done

# make sure restart completed successfully
failures=$(cat $TRAF_WORKDIR/hbase_restart_status_temp | grep '"success" : false' | wc -l)
if [ $failures -ne 0 ]; then
    echo "***ERROR: Unable to restart HBase."
    exit -1
fi

echo "***INFO: HBase restart completed successfully"


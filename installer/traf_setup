#!/bin/bash

# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2013-2015 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@

#  Setup Trafodion environment on a Cluster System

#==============================================

timestamp=$(date +%F-%H-%M-%S)
source /etc/trafodion/trafodion_config

cd $LOCAL_WORKDIR

echo "***Log File: trafodion_setup script***" >> $INSTALL_LOG
echo >> $INSTALL_LOG
echo "Username: $TRAF_USER" >> $INSTALL_LOG
echo "Nodes: $NODE_LIST" >> $INSTALL_LOG
echo "Home directory: $HOME_DIR" >> $INSTALL_LOG
echo >> $INSTALL_LOG

echo "***INFO: Starting Trafodion environment setup ($timestamp)"

#==============================================
# display license text and get acceptance
echo "=== $timestamp ==="
if [ "$ACCEPT_LICENSE" != "Y" ]; then
   cat $( cd "$( dirname "$0" )" && pwd )/trafodion_license
   echo -n "BY TYPING \"ACCEPT\" YOU AGREE TO THE TERMS OF THIS AGREEMENT: " 
   read answer
   answer=${answer,,}
   if [ "$answer" != "accept" ]; then
      echo "***ERROR: You must accept this license by typing \"accept\" to install."
      exit -1
   fi
fi

#============================
# check that we are running from a userid with sudo access
sudo echo "***INFO: testing sudo access"
if [ $? -ne 0 ]; then
    echo "***ERROR: This script must be run from userid with sudo access."
    exit -1
fi

#================================
# make sure the user didn't specify the sudo userid as the Trafodion userid
# because we rewrite the .bashrc file and don't want to mess up the user's
# current environment
if [ "$USER" == "$TRAF_USER" ]; then
    echo "***ERROR: The Trafodion username cannot be the same as the install username"
    exit -1
fi

#================================
# validate specified nodes and that we can get to them with passwordless ssh
echo "***INFO: Checking all nodes in specified node list"
bad_nodes=""
MY_NODES=""

for node in $NODE_LIST
do
    # use BatchMode so it will just give an error instead of prompting for password
    ssh -oStrictHostKeyChecking=no -oBatchMode=yes $node hostname
    if [ $? != 0 ]; then
        bad_nodes="$bad_nodes $node"
    fi
    # build MY_NODES env var to be used for pdsh & pdcp commands
    MY_NODES="$MY_NODES -w $node"
done
if [ -n "$bad_nodes" ]; then
    echo "***ERROR: unable to access all nodes in the node list with passwordless ssh"
    echo "***ERROR: problem nodes: $bad_nodes"
    exit -1
fi

echo "***INFO: Total number of nodes = $node_count"
if [ $node_count -eq 1 ]; then
    TRAF_PDSH=""
else
    # use the -S option to cause pdsh to return largest of
    # the remote command return values so we can tell if one
    # or more of the remote commands failed
    TRAF_PDSH="pdsh -S $MY_NODES"
fi
#==========================================
#Determine Internet Access

#>>>>>Check for internet access
internetAccess=true
 
#==========================================
echo "***INFO: Installing required packages"
echo "***INFO: Log file located in /var/log/trafodion"
YUM_LOG=/var/log/trafodion/trafodion_yum_$timestamp.log

# first install pdsh on each node so we can use it to install
# everything else.  don't need pdsh if only a single node
if [ $node_count -ne 1 ]; then
    for node in $NODE_LIST
    do
        echo "***INFO: ... pdsh on node $node"

        # if not already installed on this node, then install it
        ssh $node rpm -qa | grep pdsh &> /dev/null
        if [ $? -ne 0 ]; then
            ssh $node sudo mkdir -p $TRAF_WORKDIR
            ssh $node sudo mkdir -p /var/log/trafodion
	    if [[ $internetAccess == "true" ]]; then 
               ssh $node sudo yum --assumeyes install pdsh &>> $YUM_LOG
               if [ $? != 0 ]; then
                  echo "***ERROR: Can't install pdsh on node $node"
                  exit -1
               fi
            else
               echo "***ERROR: Can't install pdsh on node $node"
               echo "***ERROR: Must have pdsh installed on each node."
               echo "***ERROR: No internet access to do automatic install." 
               exit -1
            fi
        fi
    done
    # create working directory on all nodes
    $TRAF_PDSH mkdir -p $TRAF_WORKDIR &> /dev/null
    $TRAF_PDSH mkdir -p /var/log/trafodion &> /dev/null
 
fi

#================================
#Checking to see if epel package is installed. 
EPEL_INSTALLED=$( rpm -qa | grep epel | wc -l)

if [[ $EPEL_INSTALLED == 0 ]]; then
   echo "***INFO: ... EPEL rpm"
   if [[ "$EPEL_RPM" != "" ]]; then
      sudo cp -rf $EPEL_RPM $TRAF_WORKDIR
   else
      if [[ $internetAccess == "true" ]]; then
         epel_rpm="epel-release-6-8.noarch.rpm"
         sudo wget http://download.fedoraproject.org/pub/epel/6/x86_64/$epel_rpm
         if [ $? != 0 ]; then
            echo "***ERROR: Can't download EPEL rpm $epel_rpm"
            echo "***ERROR: Please check http_proxy settings in .bashrc file"
            echo
            exit -1
         fi
      else
         echo "***ERROR: No EPEL RPM installed"
         echo "***ERROR: No internet access to do automatic install."
         exit -1         
      fi
   fi

   if [ $node_count -ne 1 ]; then
      pdcp $MY_NODES $epel_rpm $TRAF_WORKDIR
   else
      cp $epel_rpm $TRAF_WORKDIR
   fi 
   $TRAF_PDSH sudo rpm -Uvh $TRAF_WORKDIR/$epel_rpm 2>> $YUM_LOG >> $YUM_LOG
   if [ $? != 0 ]; then
      echo "***ERROR: Can't install EPEL rpm $epel_rpm"
      exit -1
   fi
fi

# to handle the case where the EPEL rpm was already
# installed but disabled, we enable it here
# it doesn't hurt if it was already enabled and we try to enable it again
$TRAF_PDSH sudo yum-config-manager --enable RedHat-6-x86_64-Fedora-EPEL 2>> $YUM_LOG >> $YUM_LOG

package_list="java-1.7.0-openjdk-devel qpid-cpp-client perl sqlite"
package_list+=" expect perl-DBD-SQLite* protobuf xerces-c "
package_list+=" libiodbc unixODBC tigervnc-server firefox "
package_list+=" pixman libXfont libX11 perl-Params-Validate perl-Time-HiRes gzip"

if [[ $internetAccess == "true" ]]; then
   for package in $package_list
   do
       echo "***INFO: Checking if $package is installed ..."
       for node in $NODE_LIST
       do
          installed=`ssh -n $node sudo rpm -qa | grep $package | wc -l`
          if [[ $installed -eq "0" ]]; then
             echo "***INFO: Installing $package on all nodes"
             $TRAF_PDSH sudo yum --assumeyes install $package 2>> $YUM_LOG >> $YUM_LOG
             if [ $? != 0 ]; then
                echo "***ERROR: Can't install $package"
                exit -1
             fi
             break
          fi
       done
   done
else
   for node in $NODE_LIST
   do
      echo "***ERROR: No internet access on $node"
      echo "***ERROR: Missing packages will need to be installed."
      echo "***ERROR: Missing packages: " 
      for package in $package_list
      do
          installed=$(sudo rpm -qa | grep $package | wc -l)
          if [[ $installed -eq "0" ]]; then
             echo "$package"
             stopInstall=true
          fi
      done
   done
   if [[ $stopInstall == "true" ]]; then
      exit -1   
   fi
fi
#================================
group_package_list="Desktop Fonts"
if [[ $internetAccess ]]; then
   for group_package in $group_package_list
   do
       echo "***INFO: ... $group_package"
       $TRAF_PDSH sudo yum --assumeyes groupinstall \"$group_package\" 2>> $YUM_LOG >> $YUM_LOG
       if [ $? != 0 ]; then
           echo "***WARNING: Can't group install optional group package $group_package"
       fi
   done

   # need to do these separately because they have blanks in their name
   # and won't work properly in a list even if escaped with quotes
   group_package="Desktop Platform"
   echo "***INFO: ... $group_package"
   $TRAF_PDSH sudo yum --assumeyes groupinstall \"$group_package\" 2>> $YUM_LOG >> $YUM_LOG
   if [ $? != 0 ]; then
       echo "***WARNING: Can't group install optional group package $group_package"
   fi

   group_package="X Window System"
   echo "***INFO: ... $group_package"
   $TRAF_PDSH sudo yum --assumeyes groupinstall \"$group_package\" 2>> $YUM_LOG >> $YUM_LOG
   if [ $? != 0 ]; then
      echo "***WARNING: Can't group install optional group package $group_package"
   fi
else
  echo "***ERROR: No internet access"
  echo "***ERROR: Please install 'Desktop Fonts' 'Desktop Platform' and 'X Window System'"
fi

#=======================================
# Set some limits needed by Trafodion
traf_limits_conf="$TRAF_WORKDIR/trafodion_limits.conf"
echo "***INFO: modifying limits in /etc/security/limits.conf on all nodes"

# save a copy for uninstaller to restore
sudo cp /etc/security/limits.conf $TRAF_WORKDIR/etc_security_limits.conf_ORIGINAL

# strip out any current settings
grep --invert-match -E " *memlock | *nofile | *core | *nproc | Trafodion" /etc/security/limits.conf > $traf_limits_conf

# append Trafodion settings to end of file
echo "# Trafodion settings" >> $traf_limits_conf
echo "*   soft   core unlimited" >> $traf_limits_conf
echo "*   hard   core unlimited" >> $traf_limits_conf
echo "*   soft   memlock unlimited" >> $traf_limits_conf
echo "*   hard   memlock unlimited" >> $traf_limits_conf
echo "*   soft   nofile 32768" >> $traf_limits_conf
echo "*   hard   nofile 65536" >> $traf_limits_conf
echo "*   soft   nproc 100000" >> $traf_limits_conf
echo "*   hard   nproc 100000" >> $traf_limits_conf
echo "hbase soft nofile 8192" >> $traf_limits_conf
echo "*   soft nofile 8192" >> $traf_limits_conf
echo "*   hard nofile 65535" >> $traf_limits_conf

# copy to all nodes
if [ $node_count -eq 1 ]; then
    sudo cp $traf_limits_conf /etc/security/limits.conf
else
    pdcp $MY_NODES -x $HOSTNAME $traf_limits_conf $TRAF_WORKDIR
    pdcp $MY_NODES -x $HOSTNAME $TRAF_WORKDIR/etc_security_limits.conf_ORIGINAL $TRAF_WORKDIR
    pdsh $MY_NODES sudo cp $traf_limits_conf /etc/security/limits.conf
fi

#=======================================
echo "***INFO: create Trafodion userid \"$TRAF_USER\" "
$TRAF_WORKDIR/installer/traf_add_user

if [ $? != 0 ]; then
    echo "***ERROR: Unable to create Trafodion userid: $TRAF_USER"
    exit -1
fi

#=======================================
if [[ -f /etc/selinux/config ]]; then
   echo "***INFO: Setting SELINUX=disabled in /etc/selinux.config"
   sudo cp /etc/selinux/config $TRAF_WORKDIR/etc_selinux_config_ORIGINAL
   sudo sh -c "sed -e 's@^SELINUX=.*@SELINUX=disabled@' <$TRAF_WORKDIR/etc_selinux_config_ORIGINAL >/etc/selinux/config"
   if [ $node_count -gt 1 ] ; then
       echo "***INFO: modifying /etc/selinux/config on remaining nodes"

       sudo cp /etc/selinux/config $TRAF_WORKDIR/traf_selinux.conf

       pdcp $MY_NODES -x $HOSTNAME $TRAF_WORKDIR/traf_selinux.conf $TRAF_WORKDIR
       pdcp $MY_NODES -x $HOSTNAME $TRAF_WORKDIR/etc_selinux_config_ORIGINAL $TRAF_WORKDIR/etc_selinux_config_ORIGINAL
       pdsh $MY_NODES -x $HOSTNAME sudo cp $TRAF_WORKDIR/traf_selinux.conf /etc/selinux/config

   fi
fi

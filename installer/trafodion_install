#!/bin/bash

# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2013-2015 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@


#==============================================
#  Trafodion installation script. Setup Trafodion 
#  environment, configuartion of HBase with 
#  Hbase-trx and co-processors need for Trafodion, and 
#  install Trafodion build. All parameters from scripts
#  use configuration file  
#==============================================

function print_usage {
cat << EOF

This script will install Trafodion. It will create a configuration
file (if one has not been created), setup of the enviroment needed 
for Trafodion, configure HBase with Hbase-trx and co-processors needed,
and install a specified Trafodion build. 

Options:
    --help             Print this message and exit
    --accept_license   If provided, the user agrees to accept all the
                       provisions in the Trafodion license.  This allows
                       for automation by skipping the display and prompt of
                       the Trafodion license.
    --config_file      If provided, all install prompts will be
                       taken from this file and not prompted for.

EOF
}

#==============================================
#Parse input
USER_CONFIG=""
ACCEPT_LICENSE="N"
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            print_usage
            exit -1
            ;;
        --accept_license)
            ACCEPT_LICENSE="Y"
            shift
            ;;
        --config_file)
            if [[ -z "$2" ]]; then
                echo "***ERROR: No value passed to param $1."
                print_usage
                exit -1
            fi
            USER_CONFIG=$2
            if [ -f $USER_CONFIG ]; then
               source $USER_CONFIG
            else
               echo "***ERROR: configuration file $USER_CONFIG does not exist"
               exit -1
            fi
            shift 2
            ;;
        *)
            echo "***ERROR: unknown parameter '$1'"
            print_usage
            exit -1
    esac
    shift
done


#==============================================
echo 
echo "******************************"
echo " TRAFODION INSTALLATION START"
echo "******************************"
echo 

#==============================================
# check that we are running from a userid with sudo access
sudo echo "***INFO: testing sudo access"
if [ $? -ne 0 ]; then
    echo "***ERROR: This script must be run from a userid with sudo access."
    exit -1
fi

#==============================================
# Default values

export timestamp=$(date +%F-%H-%M-%S)
export TRAF_LOGDIR="/var/log/trafodion"
export INSTALL_LOG="$TRAF_LOGDIR/trafodion_install_$timestamp.log"
#export TRAF_WORKDIR="$( cd "$( dirname "$0" )" && pwd )/.."
export TRAF_WORKDIR="/usr/lib/trafodion"
export LOCAL_WORKDIR="$( cd "$( dirname "$0" )" && pwd )"
export TRAF_CONFIG="/etc/trafodion/trafodion_config"
TRAF_CONFIG_DIR=$(dirname $TRAF_CONFIG)

#==============================================
# Setup log & working directories

sudo mkdir -p $TRAF_LOGDIR
sudo chmod 777 $TRAF_LOGDIR
echo "***INFO: Log file located at $INSTALL_LOG"

# create a working directory
sudo mkdir -p $TRAF_WORKDIR
sudo chmod 777 $TRAF_WORKDIR
echo "***INFO: Working directory: $TRAF_WORKDIR"

# copy install scripts into working directory
sudo cp -r $(cd "$( dirname "$0" )" && pwd)/ $TRAF_WORKDIR

#==============================================
# config file
# if user supplied their own config file, then use it
if [ -z "$USER_CONFIG" ]; then
   if [ -f $TRAF_CONFIG ]; then
      source $TRAF_CONFIG
   fi

   # prompt user for configuration info
   $LOCAL_WORKDIR/traf_config_setup
   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: Error while running traf_config_setup." | tee -a $INSTALL_LOG
      echo "***ERROR: No configuration file created." | tee -a $INSTALL_LOG
      exit -1
   fi
fi
source $TRAF_CONFIG

if [ $node_count -eq 1 ]; then
    TRAF_PDSH=""
else
    TRAF_PDSH="pdsh -S $MY_NODES"
fi


sed -i '/ACCEPT_LICENSE\=/d' $TRAF_CONFIG
echo "export ACCEPT_LICENSE=\"$ACCEPT_LICENSE\"" >> $TRAF_CONFIG

# create a working directory on all nodes
$TRAF_PDSH sudo mkdir -p $TRAF_WORKDIR
$TRAF_PDSH sudo chmod 777 $TRAF_WORKDIR
$TRAF_PDSH sudo mkdir -p $LOCAL_WORKDIR

#==============================================
#Check that Hadoop nodes match Trafodion nodes

if [[ $HADOOP_TYPE == "cloudera" ]]; then
   sudo curl -su $ADMIN:$PASSWORD http://$URL/api/v6/cm/deployment > tempFile
   numberHadoopNodes=$(grep -r "hostname" tempFile | wc -l)
   grep -r "hostname" tempFile > tempFile2
fi

if [[ $HADOOP_TYPE == "hortonworks" ]]; then
   sudo curl -u $ADMIN:$PASSWORD http://$URL/api/v1/clusters/$CLUSTER_NAME/hosts > tempFile
   numberHadoopNodes=$(grep -r "host_name" tempFile | wc -l)
   grep -r "host_name" tempFile > tempFile2
fi

if [[ $numberHadoopNodes != $node_count ]]; then
   echo "***ERROR: Number of Trafodion nodes must match number of $HADOOP_TYPE nodes"
   echo "***ERROR: Exiting..."
   rm tempFile
   rm tempFile2
   exit -1
fi

#Get list of all hadoop nodes
hadoopNodes=""
while read line
do
   hostName=$(echo $line | awk '{print $3}' | sed 's/\"//g' | sed 's/\..*//' | sed 's/\,//g')
   hadoopNodes="$hadoopNodes $hostName"
done < tempFile2
rm tempFile
rm tempFile2

#Check to see that each Hadoop node is in the Trafodion list of nodes
for node in $hadoopNodes
do
   if [[ $node_count -eq "1" ]]; then
      #In the case that someone uses "localhost"
      if [[ $(hostname -s) != *$node* ]]; then
         echo "***ERROR: Trafodion must be installed on all $HADOOP_TYPE nodes"
         echo "***ERROR: $HADOOP_TYPE Nodes: $hadoopNodes"
         echo "***ERROR: Trafodion Nodes: $NODE_LIST"
         echo "***ERROR: Please rerun trafodion_install with correct set of nodes"
         echo "***ERROR: Exiting..."
         exit -1
      fi
   else
      if [[ $NODE_LIST != *$node* ]]; then
         echo "***ERROR: Trafodion must be installed on all $HADOOP_TYPE nodes"
         echo "***ERROR: $HADOOP_TYPE Nodes: $hadoopNodes"
         echo "***ERROR: Trafodion Nodes: $NODE_LIST"
         echo "***ERROR: Please rerun trafodion_install with correct set of nodes"
         echo "***ERROR: Exiting..."
         exit -1
      fi
   fi
done

#=============================================
# untar package and files into /usr/lib/trafodion (the new TRAF_WORKDIR)
# This will be a global location that all tar files are untarred into

# if we have the package tar file we need to extract
# trafodion core and dcs builds from it
if [ ! -z $TRAF_PACKAGE ]; then

   # create directory to contain build tar files using the 
   # timestamp from the package filename
   traf_filename=$(basename "$TRAF_PACKAGE")
   UNTAR_DIR="$TRAF_WORKDIR/${traf_filename%.tar.gz}"
   sudo mkdir -p $UNTAR_DIR
   sudo chmod 755 $UNTAR_DIR

   # untar the package
   sudo tar -xzf $TRAF_PACKAGE --directory=$UNTAR_DIR

   build_file=$(ls $UNTAR_DIR | grep "trafodion_server")
   if [[ -z $build_file ]]; then  
      echo "***ERROR: trafodion_server-*.tgz could not be found in $UNTAR_DIR"
      exit -1
   fi
   TRAF_BUILD=$UNTAR_DIR/$build_file

   build_file=$(ls $UNTAR_DIR | grep "dcs")
   DCS_BUILD=$UNTAR_DIR/$build_file
   
else
   # we don't have a package and only have the trafodion and dcs build tar files
   # we can't use the package filename timestamp since we don't have a package tar
   # file so we'll just create a directory using the current time
   UNTAR_DIR="$TRAF_WORKDIR/traf_$(date +%F_%H%M)"
   sudo mkdir -p $UNTAR_DIR
   sudo chmod 777 $UNTAR_DIR

   sudo cp $TRAF_BUILD $UNTAR_DIR
   if [ $? -ne 0 ]; then
      echo "***ERROR: unable to copy trafodion build ($TRAF_BUILD) to $UNTAR_DIR"
      exit -1
   fi

   sudo cp $DCS_BUILD $UNTAR_DIR
   if [ $? -ne 0 ]; then
      echo "***ERROR: unable to copy DCS build ($DCS_BUILD) to $UNTAR_DIR"
      exit -1
   fi

   build_file=$(basename $TRAF_BUILD)
   TRAF_BUILD=$UNTAR_DIR/$build_file

   sudo tar -xzf $TRAF_BUILD --directory=$UNTAR_DIR 

   build_file=$(basename $DCS_BUILD)
   DCS_BUILD=$UNTAR_DIR/$build_file

fi

sed -i '/TRAF_BUILD\=/d' $TRAF_CONFIG
echo "export TRAF_BUILD=\"$TRAF_BUILD\"" >> $TRAF_CONFIG
sed -i '/DCS_BUILD\=/d' $TRAF_CONFIG
echo "export DCS_BUILD=\"$DCS_BUILD\"" >> $TRAF_CONFIG

# add the untar directory to the config file
sed -i '/UNTAR_DIR\=/d' $TRAF_CONFIG
echo "export UNTAR_DIR=\"$UNTAR_DIR\"" >> $TRAF_CONFIG
source $TRAF_CONFIG

#=============================================
#Check if doing an upgrade

userForTrafodion=`grep "$TRAF_USER:" /etc/passwd | wc -l`
if [[ $CONFIG_COMPLETE ]]; then
   if [[ "$userForTrafodion" == "0" ]]; then
      UPGRADE_TRAF=false;
   else
      UPGRADE_TRAF=true;
   fi
   
   #Add upgrade variable to config file
   sudo chmod 777 $TRAF_CONFIG
   sed -i '/UPGRADE_TRAF\=/d' $TRAF_CONFIG
   echo "export UPGRADE_TRAF=\"$UPGRADE_TRAF\"" >> $TRAF_CONFIG
   sudo chmod 777 $TRAF_CONFIG
   if [ "$node_count" -ne 1 ]; then
      pdcp $MY_NODES $TRAF_CONFIG $TRAF_CONFIG_DIR
   fi
   source $TRAF_CONFIG
fi

#==============================================
#Check to make sure HBase Version matches trafodion build

#>>>NOTE: might have a problem with developer UTT build tar filenames
#>>>      becasue they might not have a date within the filename

for node in $NODE_LIST;
do
   ssh $node -n 'echo "exit" | hbase shell &> hbaseVersion.txt'
   hbaseInstalled=$(ssh -n $node grep "Version" $HOME/hbaseVersion.txt | wc -l)
   if [[ $hbaseInstalled -eq "0" ]]; then
      echo "***ERROR: Hbase version could not be determined on $node"
      echo "***ERROR: Please check that HBase is installed on all nodes."
      exit -1
   fi
 
   version=$(ssh -n $node grep "Version" $HOME/hbaseVersion.txt | sed 's/-.*//' | awk {'print$2'})
   hbaseVersion=$(echo "${version#*.}"| cut -f1 -d".")
   if [[ $hbaseVersion -lt "98" ]]; then
      echo "***ERROR: HBase installed must be 0.98"
      exit -1 
   fi
done

hbaseVersion=$(grep "Version" $HOME/hbaseVersion.txt | sed 's/-.*//' | awk {'print$2'})
HBASE=$(curl -su $ADMIN:$PASSWORD http://$URL/api/v1/clusters/$CLUSTER_NAME/services | grep name | grep hbase | sed -e 's@[,]@@'g | awk '{print $3}' | sed "s/\"//g")


sudo chmod 777 $TRAF_CONFIG
sed -i '/hbaseVersion\=/d' $TRAF_CONFIG
echo "export hbaseVersion=\"$hbaseVersion\"" >> $TRAF_CONFIG
sed -i '/HBASE\=/d' $TRAF_CONFIG
echo "export HBASE=\"$HBASE\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
if [ $node_count -ne 1 ]; then
   pdcp $MY_NODES $TRAF_CONFIG $TRAF_CONFIG_DIR
fi

sudo rm -rf hbaseVersion.txt

trafodionFullName=$(basename $TRAF_BUILD)
echo "***DEBUG: trafodionFullName=$trafodionFullName"
#Debug version
trafodionVersion=$(echo $trafodionFullName | sed 's/trafodion_server-//' | sed 's/-debug//' | sed 's/.tgz//')

echo "***INFO: Trafodion version = $trafodionVersion"

#==============================================
# Determine Trafodion version by parsing it
# from the hbase-trx jar filename.
# Determine Java version

cd $UNTAR_DIR

# clean up any old files left lying around
sudo rm -rf $UNTAR_DIR/export/lib 2>/dev/null

# extract the hbase-trx jar file (and others) from the build tar file
sudo tar -xzf $TRAF_BUILD export/lib 2>&1 | tee -a $INSTALL_LOG
if [ ${PIPESTATUS[0]} != 0 ]; then
    echo "***ERROR: unable to find export/lib/ directory in $TRAF_BUILD" 2>&1 | tee -a $INSTALL_LOG
    exit -1
fi

# parse the version string from the hbase-trx-n.n.n.jar filename
TRAF_VERSION=$(sudo ls $UNTAR_DIR/export/lib | \
               grep --max-count=1 hbase-trx | \
               sed -e 's@hbase-trx-\([0-9].*\).jar@\1@')

# Detect java version
java_exec=$(ps -C java --noheader -o pid,user,cmd \
   | grep --max-count=1 " hbase" \
   | awk '{print $3}' )
echo "***DEBUG: HBase's java_exec=$java_exec"
if [ -z $java_exec ]; then
   echo "***ERROR: Unable to determin HBase's Java version"
   echo "***ERROR: Check that HBase is up on node $HOSTNAME"
   exit -1
fi

JAVA_VERSION=$($java_exec -version 2>&1)
JAVA_VERSION=$(echo $JAVA_VERSION \
   | grep version \
   | awk '{print $3}' \
   | sed -e 's@"@@g')

# test for java 1.7
java_17=$(echo $JAVA_VERSION | grep "1.7." | wc -l)

# if not java 1.7 then test for java 1.6
if [ "$java_17" == "0" ]; then
   java_16=$(echo $JAVA_VERSION | grep "1.6." | wc -l)

   # if not 1.7 nor 1.6 then we have a problem
   if [ "$java_16" == "0" ]; then
      echo "***ERROR: Unsupported HBase java version.  HBase java version must be 1.6 or 1.7"
      exit -1
   else
      JAVA_VERSION="1.6"
   fi
else
   JAVA_VERSION="1.7"
fi

sudo chmod 777 $TRAF_CONFIG
sed -i '/TRAF_VERSION\=/d' $TRAF_CONFIG
echo "export TRAF_VERSION=\"$TRAF_VERSION\"" >> $TRAF_CONFIG
sed -i '/JAVA_VERSION\=/d' $TRAF_CONFIG
echo "export JAVA_VERSION=\"$JAVA_VERSION\"" >> $TRAF_CONFIG
sudo chmod 777 $TRAF_CONFIG
if [ $node_count -ne 1 ]; then
   pdcp $MY_NODES $TRAF_CONFIG $TRAF_CONFIG_DIR
fi

#==============================================
# Run trafodion_setup
echo
echo "******************************"
echo " TRAFODION SETUP"
echo "******************************"
echo

if [[ "$UPGRADE_TRAF" == "true" ]]; then
   echo "***INFO: $TRAF_USER username has already been installed." | tee -a $INSTALL_LOG
   echo "***INFO: Skipping Trafodion setup..." | tee -a $INSTALL_LOG

   trafodionRunning=$(sudo su trafodion --login --command "cstat --no-header | wc -l")

   if [[ "$trafodionRunning" -ne "0" ]]; then
      echo "***ERROR: Trafodion is still running."
      echo -n "Stop Trafodion (Y/N), default is N: "
      read answer

      if [ -z $answer ]; then
         echo "***ERROR: Please stop Trafodion then rerun trafodion_install"
         echo "***ERROR: Change to trafodion userid then do a 'sqstop'"
         exit -1
      else
         if [[ ${answer^} == "Y" ]]; then
            echo "***INFO: Stopping Trafodion instance."
            sudo su $TRAF_USER --login --command "sqstop"
            sudo su $TRAF_USER --login --command "ckillall"
         else
            echo "***ERROR: Please stop Trafodion then rerun trafodion_install"
            echo "***ERROR: Change to trafodion user id then do a 'sqstop'"
            exit -1
         fi
      fi

   fi
else
   $TRAF_WORKDIR/installer/traf_setup | tee -a $INSTALL_LOG

   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: Error while running traf_setup." | tee -a $INSTALL_LOG
      echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
      echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
      exit -1
   else
      echo "***INFO: Trafodion environment setup completed" | tee -a $INSTALL_LOG
   fi
fi

#Create sqconfig file if it does not exist

#sqconfigExist=$(sudo ls $HOME_DIR/$TRAF_USER/sqconfig | wc -l)

if [[ ! -f $HOME_DIR/$TRAF_USER/sqconfig ]]; then
   $TRAF_WORKDIR/installer/traf_sqconfig
   if [ $? != 0 ]; then
      echo "***ERROR: traf_sqconfig script failed."
      echo "***ERROR: sqconfig file not created."
      exit -1
   fi
fi

#>>> we don't really need to copy all this to the trafodion userid's home dir
#Create install directory
pdsh -S $MY_NODES sudo mkdir -p /$HOME_DIR/$TRAF_USER/installer &> /dev/null

#=============================================
#Run trafodion_mods

echo
echo "******************************"
echo " TRAFODION MODS"
echo "******************************"
echo

if [[ $HADOOP_TYPE == "cloudera" ]]; then
   echo "***INFO: Cloudera installed will run traf_cloudera_mods98" 2>&1 | tee -a $INSTALL_LOG
   $TRAF_WORKDIR/installer/traf_cloudera_mods98 2>&1 | tee -a $INSTALL_LOG
   if [ ${PIPESTATUS[0]} != "0" ]; then
      echo "***ERROR: traf_cloudera_mods98 exited with error." | tee -a $INSTALL_LOG
      echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
      echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
      exit -1
   fi
fi

if [[ $HADOOP_TYPE == "hortonworks" ]]; then
   echo "***INFO: Hortonworks installed will run traf_hortonworks_mods98" 2>&1 | tee -a $INSTALL_LOG
   $TRAF_WORKDIR/installer/traf_hortonworks_mods98 2>&1 | tee -a $INSTALL_LOG
   if [ ${PIPESTATUS[0]}  != "0" ]; then
      echo "***ERROR: traf_hortonworks_mods98 exited with error." | tee -a $INSTALL_LOG
      echo "***ERROR: Please check log files." | tee -a $INSTALL_LOG
      echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
      exit -1
   fi
fi

echo "***INFO: Trafodion Mods ran successfully."

#==============================================
#Install Trafodion
echo
echo "******************************"
echo " TRAFODION INSTALLER"
echo "******************************"
echo
sudo su $TRAF_USER --command "$TRAF_WORKDIR/installer/traf_installer"

if [ ${PIPESTATUS[0]} != "0" ]; then
   echo "***ERROR: Error while running traf_installer." | tee -a $INSTALL_LOG
   echo "***ERROR: Setup not complete, review logs." | tee -a $INSTALL_LOG
   echo "***ERROR: Exiting...." | tee -a $INSTALL_LOG
   exit -1
fi

#==============================================
echo
echo "*********************************"
echo " TRAFODION INSTALLATION COMPLETE"
echo "*********************************"
echo


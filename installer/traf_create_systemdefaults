#!/bin/bash
# @@@ START COPYRIGHT @@@
#
# (C) Copyright 2013-2015 Hewlett-Packard Development Company, L.P.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
#
# @@@ END COPYRIGHT @@@
#
# This script will create the SQSystemdefaults.conf file
# by extracting info from Cloudera or Hortonworks REST API.
#
# NOTE: Currently only works for Cloudera installations
#

USER_NAME="admin"
PASSWORD="admin"


CLOUDERA=$(rpm -qa | grep cloudera | wc -l)
AMBARI=$(rpm -qa | grep ambari | wc -l)

if [[ $CLOUDERA -ne 0 ]]; then
   typeset URL_PORT=$(hostname --long):7180
fi

if [[ $AMBARI -ne 0 ]]; then
   typeset URL_PORT=$(hostname --long):8080
fi

mkdir -p $MY_SQROOT/etc
SYS_DEFAULTS=$MY_SQROOT/etc/SQSystemDefaults.conf

function displayHelp
{
  echo
  echo "This script will create the SQSystemdefaults.conf file."
  echo
  echo "Usage: $(basename $0) [options]"
  echo
  echo "Options:"
  echo "    --help               Print this message and exit."
  echo "    --cloudera_userid    Cloudera username if not chosen will default to admin"
  echo "    --cloudera_password  Cloudera password if not chosen will default to admin"
  echo "    --cloudera_url       Cloudera url:port if not chosen will default to hostname:7180"
  echo "    --ambari_userid      Ambari username if not chosen will default to admin"
  echo "    --ambari_password    Ambari password if not chosen will default to admin"
  echo "    --ambari_url         Ambari url:port if not chosen will default to hostname:8080"
  echo

}

while [ $# -gt 0 ]; do

  case $1 in
   --cloudera_userid)
     shift
     USER_NAME=$1
     ;;

   --cloudera_password)
     shift
     PASSWORD=$1
     ;;

   --cloudera_url)
     shift
     URL_PORT=$1
     ;;

   --cluster_name)
     shift
     CLUSTER_NAME=$1
     ;;

   --ambari_userid)
     shift
     USER_NAME=$1
     ;;

   --ambari_password)
     shift
     PASSWORD=$1;
     ;;

   --ambari_url)
     shift
     URL_PORT=$1
     ;;

   --help)
     shift
     displayHelp
     exit
     ;;

   **)
     echo "Error! Incorrect Command."
     exit
     ;;

  esac
  shift
done

#=================================
# These functions extract either the value or default-value
# for a given Hive or Hbase configuration property
function get_hive_config()
{
    cat $MY_SQROOT/traf_hive_conf | \
        grep -A2 $1 | \
        grep --max-count=1 -E "default|value" | \
        sed -e 's@[",:]@@g' | \
        awk '{print $2}'
}

function get_hbase_config()
{
    cat $MY_SQROOT/traf_hbase_conf | \
        grep -A2 $1 | \
        grep --max-count=1 -E "default|value" | \
        sed -e 's@[",:]@@g' | \
        awk '{print $2}'
}
#=================================

# Get the hive & hbase configurations from Cloudera using REST API
rm $MY_SQROOT/traf_hive_config_temp 2> /dev/null
rm $MY_SQROOT/traf_hbase_config_temp 2> /dev/null
curl -u "$USER_NAME:$PASSWORD" \
    http://$URL_PORT/api/v1/clusters/$CLUSTER_NAME/services/hive1/config?view=full \
    > $MY_SQROOT/traf_hive_config_temp
if [ $? != "0" ]; then
    echo "***ERROR: unable to get hive configuration info from Cloudera.  Check that Cloudera is up."
    exit -1
fi

# In most cases curl does not return an error 
# so curl's actual output needs to be checked, too
curl_error=$(grep TITLE $MY_SQROOT/traf_hive_config_temp | grep Error | wc -l)
if [ $curl_error -ne 0 ]; then
    echo "***ERROR: unable to get hive configuration info from Cloudera.  Check that Cloudera is up."
    exit -1
fi

curl -u "$USER_NAME:$PASSWORD" \
    http://$URL_PORT/api/v1/clusters/$CLUSTER_NAME/services/hbase1/config?view=full \
    > $MY_SQROOT/traf_hbase_config_temp
if [ $? != "0" ]; then
    echo "***ERROR: unable to get hive configuration info from Cloudera.  Check that Cloudera is up."
    exit -1
fi

# In most cases curl does not return an error 
# so curl's actual output needs to be checked, too.
curl_error=$(grep TITLE $MY_SQROOT/traf_hbase_config_temp | grep Error | wc -l)
if [ $curl_error -ne 0 ]; then
    echo "***ERROR: unable to get hbase configuration info from Cloudera.  Check that Cloudera is up."
    exit -1
fi


# Pull out just the names, values and defaults to make parsing the
# JSON output a little easier.  NOTE: there isn't always a 'value' line
grep -E "\"name\"|\"value\"|\"default\"" $MY_SQROOT/traf_hive_config_temp > $MY_SQROOT/traf_hive_conf
grep -E "\"name\"|\"value\"|\"default\"" $MY_SQROOT/traf_hbase_config_temp > $MY_SQROOT/traf_hbase_conf
rm $MY_SQROOT/traf_hive_config_temp
rm $MY_SQROOT/traf_hbase_config_temp

# Get all the settings we need
HBASE_THRIFT_PORT=$(get_hbase_config "hbase_thriftserver_port")
HIVE_HOST=$(get_hive_config "hive_metastore_database_host")
HIVE_PORT=$(get_hive_config "hive_metastore_database_port")
HIVE_PASSWORD=$(get_hive_config "hive_metastore_database_password")
HIVE_USER=$(get_hive_config "hive_metastore_database_user")
HIVE_METASTORE_NAME=$(get_hive_config "hive_metastore_database_name")
HIVE_TYPE=$(get_hive_config "hive_metastore_database_type")

# Write them out to the conf file
echo "HBASE_THRIFT_PORT, $HBASE_THRIFT_PORT" > $SYS_DEFAULTS
echo "HIVE_METADATA_CPCC_URL, tcp://$HIVE_HOST:$HIVE_PORT" >> $SYS_DEFAULTS
echo "HIVE_METADATA_USER, $HIVE_USER" >> $SYS_DEFAULTS
echo "HIVE_METADATA_PASSWORD, $HIVE_PASSWORD" >> $SYS_DEFAULTS
echo "HIVE_METADATA_SCHEMA, $HIVE_METASTORE_NAME" >> $SYS_DEFAULTS

echo "***INFO: generated $SYS_DEFAULTS file"
cat $SYS_DEFAULTS

echo "***INFO: $SYS_DEFAULTS file created"
